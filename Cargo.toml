[package]
name = "logosky"
version = "0.3.1"
edition = "2024"
repository = "https://github.com/al8n/logosky"
homepage = "https://github.com/al8n/logosky"
documentation = "https://docs.rs/logosky"
description = "A seamless integration layer between Logos lexer and Chumsky parser combinator, providing zero-copy Tokenizer adapter and Parseable trait for building robust parsers"
license = "MIT OR Apache-2.0"
rust-version = "1.87"
categories = ["parsing", "text-processing", "no-std"]
keywords = ["lexer", "parser", "logos", "chumsky", "combinator"]

[features]
default = ["std"]
alloc = []
std = [
  "thiserror/default",
  "bytes?/default",
  "hipstr?/default",
  "bstr?/default",
  "chumsky?/default",
]

chumsky = ["dep:chumsky"]
rowan = ["dep:rowan", "std", "generic-array"]
generic-array = ["dep:generic-array"]

either = ["dep:either"]
among = ["dep:among"]
hipstr = ["dep:hipstr"]
bytes = ["dep:bytes", "chumsky/bytes"]
bstr = ["dep:bstr"]
smallvec = ["dep:smallvec", "alloc"]

[dependencies]
ascii = { version = "1", default-features = false }
derive_more = { version = "2", default-features = false, features = [
  "display",
  "deref",
  "as_ref",
  "from",
  "into",
  "unwrap",
  "try_unwrap",
  "is_variant",
] }
logos = { version = "0.15", default-features = false, features = [
  "export_derive",
] }
paste = "1"
thiserror = { version = "2", default-features = false }

chumsky = { version = "0.11", default-features = false, optional = true }

rowan = { version = "0.16", optional = true }
generic-array = { version = "1", default-features = false, optional = true }

among = { version = "0.1", default-features = false, optional = true }
bstr = { version = "1", default-features = false, optional = true }
bytes = { version = "1", default-features = false, optional = true }
hipstr = { version = "0.8", default-features = false, optional = true }
either = { version = "1", default-features = false, optional = true }
smallvec = { version = "1", default-features = false, optional = true, features = [
  "const_new",
] }

[dev-dependencies]
criterion = "0.7"
tempfile = "3"

[profile.bench]
opt-level = 3
debug = false
codegen-units = 1
lto = 'thin'
incremental = false
debug-assertions = false
overflow-checks = false
rpath = false

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints.rust]
rust_2018_idioms = "warn"
single_use_lifetimes = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tarpaulin)'] }
